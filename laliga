<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Liga de Pádel - Los Pibes </title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    .bracket { display: flex; flex-direction: column; align-items: center; margin-top: 30px; }
    .round { display: flex; justify-content: center; width: 100%; margin-bottom: 20px; }
    .match { border: 1px solid #ccc; padding: 10px; margin: 5px; text-align: center; min-width: 150px; }
    body { padding-top: 70px; }
  </style>
</head>
<body class="bg-light">
  <!-- Menú de navegación -->
  <nav class="navbar navbar-expand-lg navbar-dark bg-primary fixed-top">
    <div class="container">
      <a class="navbar-brand" href="#home">Liga de Pádel - Los Pibes</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav ms-auto">
          <li class="nav-item me-2"><a class="btn btn-outline-light" href="#home">Inicio</a></li>
          <!-- Esta opción se muestra solo para admin -->
          <li class="nav-item me-2 d-none" id="registrarNav"><a class="btn btn-outline-light" href="#registrar">Registrar Partido</a></li>
          <li class="nav-item me-2"><a class="btn btn-outline-light" href="#historial">Historial</a></li>
          <li class="nav-item me-2"><a class="btn btn-outline-light" href="#calendario">Calendario</a></li>
          <li class="nav-item me-2"><a class="btn btn-outline-light" href="#normas">Normas</a></li>
          <li class="nav-item me-2"><a class="btn btn-outline-light" href="#clasificacion">Clasificación</a></li>
          <li class="nav-item me-2"><a class="btn btn-outline-light" href="#playoffs">Play Offs</a></li>
          <li class="nav-item" id="loginNav"><a class="btn btn-outline-light" href="#login">Iniciar Sesión</a></li>
          <li class="nav-item d-none" id="logoutNav"><a class="btn btn-outline-light" href="#logout">Cerrar Sesión</a></li>
        </ul>
      </div>
    </div>
  </nav>

  <!-- Contenedor principal -->
  <div class="container" id="app">
    <p>Cargando...</p>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  
  <script>
    // --------------------------------------------------------------------
    // 1. CONFIGURACIÓN: URL de la API
    // --------------------------------------------------------------------
    const API_BASE_URL = 'http://localhost:3000/api';

    // Llave para login local
    const ADMIN_KEY = 'laliga_admin';

    // --------------------------------------------------------------------
    // 2. Funciones para PARTIDOS (usando la API)
    // --------------------------------------------------------------------
    async function fetchPartidosDB() {
      try {
        const res = await fetch(`${API_BASE_URL}/partidos`);
        if (!res.ok) throw new Error('Error al obtener partidos');
        return await res.json();
      } catch (error) {
        console.error('fetchPartidosDB error:', error);
        return [];
      }
    }

    async function createPartidoDB(partido) {
      try {
        const res = await fetch(`${API_BASE_URL}/partidos`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(partido)
        });
        return await res.json();
      } catch (error) {
        console.error('createPartidoDB error:', error);
        return null;
      }
    }

    async function updatePartidoDB(id, partido) {
      try {
        const res = await fetch(`${API_BASE_URL}/partidos/${id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(partido)
        });
        return await res.json();
      } catch (error) {
        console.error('updatePartidoDB error:', error);
        return null;
      }
    }

    async function deletePartidoDB(id) {
      try {
        const res = await fetch(`${API_BASE_URL}/partidos/${id}`, {
          method: 'DELETE'
        });
        return await res.json();
      } catch (error) {
        console.error('deletePartidoDB error:', error);
        return null;
      }
    }

    // --------------------------------------------------------------------
    // 3. Funciones para CLASIFICACIÓN (usando la API)
    // --------------------------------------------------------------------
    async function fetchClasificacionDB() {
      try {
        const res = await fetch(`${API_BASE_URL}/clasificacion`);
        if (!res.ok) throw new Error('Error al obtener clasificación');
        return await res.json();
      } catch (error) {
        console.error('fetchClasificacionDB error:', error);
        return [];
      }
    }

    // --------------------------------------------------------------------
    // 4. Función para obtener EQUIPOS (desde /api/equipos)
    // --------------------------------------------------------------------
    async function fetchEquipos() {
      try {
        const res = await fetch(`${API_BASE_URL}/equipos`);
        if (!res.ok) throw new Error('Error al obtener equipos');
        return await res.json(); // Se espera: [{ equipo: "Lorenzo/Maxi" }, ...]
      } catch (error) {
        console.error('fetchEquipos error:', error);
        return [];
      }
    }

    // --------------------------------------------------------------------
    // 5. Funciones para login local
    // --------------------------------------------------------------------
    function isAdmin() {
      return localStorage.getItem(ADMIN_KEY) === 'true';
    }
    function setAdmin(flag) {
      localStorage.setItem(ADMIN_KEY, flag ? 'true' : 'false');
      updateNav();
    }
    function updateNav() {
      // Mostrar "Registrar Partido" solo para administradores
      if (isAdmin()) {
        document.getElementById('registrarNav').classList.remove('d-none');
      } else {
        document.getElementById('registrarNav').classList.add('d-none');
      }
      document.getElementById('loginNav').classList.toggle('d-none', isAdmin());
      document.getElementById('logoutNav').classList.toggle('d-none', !isAdmin());
    }

    // --------------------------------------------------------------------
    // 6. Vistas
    // --------------------------------------------------------------------
    // Calendario (local)
    const defaultCalendar = [
      { jornada: 1, fechas: "24-30 Marzo", matches: [
          { team1: "Lorenzo/Maxi", team2: "Ale/Tito" },
          { team1: "Dani/Toni", team2: "Mau/Alexis" },
          { team1: "Josete/Feli", team2: "Boni/Nacho" }
        ]
      },
      { jornada: 2, fechas: "31-6 Abril", matches: [
          { team1: "Mau/Alexis", team2: "Boni/Nacho" },
          { team1: "Ale/Tito", team2: "Josete/Feli" },
          { team1: "Lorenzo/Maxi", team2: "Dani/Toni" }
        ]
      },
      { jornada: 3, fechas: "7-13 Abril", matches: [
          { team1: "Josete/Feli", team2: "Dani/Toni" },
          { team1: "Lorenzo/Maxi", team2: "Mau/Alexis" },
          { team1: "Boni/Nacho", team2: "Ale/Tito" }
        ]
      },
      { jornada: 4, fechas: "21-27 Abril", matches: [
          { team1: "Ale/Tito", team2: "Dani/Toni" },
          { team1: "Mau/Alexis", team2: "Boni/Nacho" },
          { team1: "Lorenzo/Maxi", team2: "Josete/Feli" }
        ]
      },
      { jornada: 5, fechas: "28 Abril-4 Mayo", matches: [
          { team1: "Boni/Nacho", team2: "Lorenzo/Maxi" },
          { team1: "Ale/Tito", team2: "Mau/Alexis" },
          { team1: "Dani/Toni", team2: "Josete/Feli" }
        ]
      },
      { jornada: 6, fechas: "5-11 Mayo", matches: [
          { team1: "Ale/Tito", team2: "Lorenzo/Maxi" },
          { team1: "Mau/Alexis", team2: "Dani/Toni" },
          { team1: "Boni/Nacho", team2: "Josete/Feli" }
        ]
      },
      { jornada: 7, fechas: "12-18 Mayo", matches: [
          { team1: "Boni/Nacho", team2: "Mau/Alexis" },
          { team1: "Josete/Feli", team2: "Ale/Tito" },
          { team1: "Dani/Toni", team2: "Lorenzo/Maxi" }
        ]
      },
      { jornada: 8, fechas: "19-25 Mayo", matches: [
          { team1: "Dani/Toni", team2: "Josete/Feli" },
          { team1: "Mau/Alexis", team2: "Lorenzo/Maxi" },
          { team1: "Ale/Tito", team2: "Boni/Nacho" }
        ]
      },
      { jornada: 9, fechas: "26 Mayo-1 Junio", matches: [
          { team1: "Dani/Toni", team2: "Ale/Tito" },
          { team1: "Boni/Nacho", team2: "Mau/Alexis" },
          { team1: "Josete/Feli", team2: "Lorenzo/Maxi" }
        ]
      },
      { jornada: 10, fechas: "2-8 Junio", matches: [
          { team1: "Lorenzo/Maxi", team2: "Boni/Nacho" },
          { team1: "Mau/Alexis", team2: "Ale/Tito" },
          { team1: "Josete/Feli", team2: "Dani/Toni" }
        ]
      }
    ];
    function getCalendar() {
      return defaultCalendar;
    }

    // Playoffs: se generan automáticamente según la clasificación
    async function generatePlayoffs() {
      const clasificacion = await fetchClasificacionDB();
      if (clasificacion.length < 4) {
        return `<h2 class="mb-4">Play Offs</h2>
                <div class="alert alert-warning">No hay al menos 4 equipos en la clasificación.</div>`;
      }
      const semifinal1 = {
        team1: clasificacion[0].equipo,
        team2: clasificacion[3].equipo
      };
      const semifinal2 = {
        team1: clasificacion[1].equipo,
        team2: clasificacion[2].equipo
      };
      return `
        <h2 class="mb-4">Play Offs</h2>
        <div class="bracket">
          <div class="round">
            <div class="match">
              <h5>Semifinal 1</h5>
              <p>${semifinal1.team1} vs ${semifinal1.team2}</p>
              <p><small>Sets: Por definir</small></p>
            </div>
            <div class="match">
              <h5>Semifinal 2</h5>
              <p>${semifinal2.team1} vs ${semifinal2.team2}</p>
              <p><small>Sets: Por definir</small></p>
            </div>
          </div>
          <div class="round">
            <div class="match">
              <h5>Final</h5>
              <p>Por definir</p>
              <p><small>Sets: Por definir</small></p>
            </div>
          </div>
        </div>
      `;
    }

    const views = {
      home: `
        <div class="text-center">
          <div class="d-flex justify-content-center flex-wrap gap-3">
            <img src="static/pibes.jpg" alt="pibes" class="img-fluid mb-3 rounded shadow" style="max-width: 600px;">
            <img src="static/lospibesescudo.jpg" alt="pibes" class="img-fluid mb-3 rounded shadow" style="max-width: 500px;">
          </div>
          <h2 class="mb-3">Bienvenido a la Liga</h2>
          <p class="lead">Utiliza el menú para ver la información (Historial, Calendario, Clasificación, Play Offs y Normas).</p>
          <p class="text-muted">Liga de Verano.</p>
        </div>
      `,
      login: `
        <div class="row justify-content-center">
          <div class="col-md-4">
            <h3 class="mb-3 text-center">Iniciar Sesión</h3>
            <form id="loginForm">
              <div class="mb-3">
                <label for="password" class="form-label">Contraseña:</label>
                <input type="password" class="form-control" id="password" required>
              </div>
              <button type="submit" class="btn btn-primary w-100">Iniciar Sesión</button>
            </form>
          </div>
        </div>
      `,
      logout: `
        <div class="text-center">
          <h3>Has cerrado sesión</h3>
          <p>Redirigiendo a inicio...</p>
        </div>
      `,
      registrar: `
        <div class="card mx-auto" style="max-width: 600px;">
          <div class="card-header bg-secondary text-white">
            <h4 class="card-title mb-0">Registrar Partido</h4>
          </div>
          <div class="card-body">
            <form id="registrarForm">
              <!-- Los desplegables se llenan dinámicamente -->
              <div class="mb-3">
                <label for="equipoA" class="form-label">Equipo A:</label>
                <select class="form-select" id="equipoA" required>
                  <option value="">-- Selecciona --</option>
                </select>
              </div>
              <div class="mb-3">
                <label for="equipoB" class="form-label">Equipo B:</label>
                <select class="form-select" id="equipoB" required>
                  <option value="">-- Selecciona --</option>
                </select>
              </div>
              <h5>Set 1:</h5>
              <div class="row mb-3">
                <div class="col">
                  <label for="set1A" class="form-label">Equipo A:</label>
                  <input type="number" class="form-control" id="set1A" value="0" required>
                </div>
                <div class="col">
                  <label for="set1B" class="form-label">Equipo B:</label>
                  <input type="number" class="form-control" id="set1B" value="0" required>
                </div>
              </div>
              <h5>Set 2:</h5>
              <div class="row mb-3">
                <div class="col">
                  <label for="set2A" class="form-label">Equipo A:</label>
                  <input type="number" class="form-control" id="set2A" value="0" required>
                </div>
                <div class="col">
                  <label for="set2B" class="form-label">Equipo B:</label>
                  <input type="number" class="form-control" id="set2B" value="0" required>
                </div>
              </div>
              <h5>Set 3:</h5>
              <div class="row mb-3">
                <div class="col">
                  <label for="set3A" class="form-label">Equipo A:</label>
                  <input type="number" class="form-control" id="set3A" value="0" required>
                </div>
                <div class="col">
                  <label for="set3B" class="form-label">Equipo B:</label>
                  <input type="number" class="form-control" id="set3B" value="0" required>
                </div>
              </div>
              <div class="mb-3">
                <label for="jornada" class="form-label">Jornada:</label>
                <select class="form-select" id="jornada" required>
                  <option value="">-- Selecciona --</option>
                  ${[...Array(10).keys()].map(i => `<option value="${i+1}">Jornada ${i+1}</option>`).join('')}
                </select>
              </div>
              <div class="mb-3">
                <label for="lugar" class="form-label">Lugar/Club:</label>
                <input type="text" class="form-control" id="lugar">
              </div>
              <div class="mb-3">
                <label for="hora" class="form-label">Hora:</label>
                <input type="time" class="form-control" id="hora">
              </div>
              <button type="submit" class="btn btn-primary w-100">Registrar Partido</button>
            </form>
          </div>
        </div>
      `,
      historial: async function() {
        const partidos = await fetchPartidosDB();
        let content = `<h2 class="mb-4">Historial de Partidos</h2>`;
        if (partidos.length === 0) {
          content += `<div class="alert alert-info">No hay partidos registrados.</div>`;
        } else {
          content += `<div class="list-group">`;
          partidos.forEach(p => {
            content += `
              <div class="list-group-item">
                <h5>${p.equipo_a} - ${p.equipo_b} <small class="text-muted">(Jornada ${p.jornada})</small></h5>
                <p class="mb-0"><small>Sets: ${p.set1_a}-${p.set1_b}, ${p.set2_a}-${p.set2_b}, ${p.set3_a}-${p.set3_b}</small></p>
                <p class="mb-0"><small>Fecha: ${p.fecha}</small></p>
                ${
                  isAdmin() 
                  ? `<div class="mt-2">
                       <button class="btn btn-warning btn-sm" onclick="editMatch(${p.id})">Modificar</button>
                       <button class="btn btn-danger btn-sm" onclick="deleteMatch(${p.id})">Eliminar</button>
                     </div>`
                  : ''
                }
              </div>
            `;
          });
          content += `</div>`;
        }
        return content;
      },
      calendario: function() {
        const calendar = getCalendar();
        let content = `<h2 class="mb-4">Calendario de Jornadas</h2>`;
        calendar.forEach(jornadaObj => {
          content += `
            <div class="card mb-3">
              <div class="card-header bg-info text-white">
                <h5 class="mb-0">Jornada ${jornadaObj.jornada} - ${jornadaObj.fechas}</h5>
              </div>
              <ul class="list-group list-group-flush">
          `;
          jornadaObj.matches.forEach(match => {
            content += `
              <li class="list-group-item d-flex justify-content-between align-items-center">
                <span>${match.team1} - ${match.team2}</span>
              </li>
            `;
          });
          content += `</ul></div>`;
        });
        return content;
      },
      normas: `
        <h2 class="mb-4">Normas de la Liga "Los Pibes"</h2>
        <ul class="list-group">
          <li class="list-group-item">Se empieza a partir del 24 de marzo y en junio deben estar jugados todos los partidos para semifinal y final.</li>
          <li class="list-group-item">No es obligatorio jugar todas las semanas, pero hay que ir avanzando en el calendario.</li>
          <li class="list-group-item">Los 4 primeros pasan a semifinal (ida y vuelta).</li>
          <li class="list-group-item">Partido ganado: 3 puntos; partido perdido pero con set ganado: 1 punto; partido perdido sin ganar set: 0 puntos.</li>
          <li class="list-group-item">La semifinal y final se jugarán en junio, y se propone un gran asadito.</li>
          <li class="list-group-item">Se evaluará la compra de trofeos para campeones y subcampeones.</li>
        </ul>
      `,
      clasificacion: async function() {
        const clasificacion = await fetchClasificacionDB();
        let content = `<h2 class="mb-4">Clasificación</h2>`;
        if (clasificacion.length === 0) {
          content += `<div class="alert alert-info">No hay datos en la clasificación.</div>`;
        } else {
          content += `<table class="table table-striped">
            <thead>
              <tr>
                <th>Posición</th>
                <th>Equipo</th>
                <th>Puntos</th>
                <th>Sets a Favor</th>
                <th>Sets en Contra</th>
                <th>Diferencia</th>
              </tr>
            </thead>
            <tbody>`;
          clasificacion.forEach((row, index) => {
            content += `
              <tr class="${index < 4 ? 'table-success' : ''}">
                <td>${index + 1}</td>
                <td>${row.equipo}</td>
                <td>${row.puntos}</td>
                <td>${row.sets_a_favor}</td>
                <td>${row.sets_en_contra}</td>
                <td>${row.diferencia}</td>
              </tr>
            `;
          });
          content += `</tbody></table>`;
        }
        return content;
      },
      playoffs: async function() {
        // Genera automáticamente las semifinales a partir de la clasificación
        const clasificacion = await fetchClasificacionDB();
        if (clasificacion.length < 4) {
          return `<h2 class="mb-4">Play Offs</h2>
                  <div class="alert alert-warning">No hay al menos 4 equipos en la clasificación.</div>`;
        }
        const semifinal1 = {
          team1: clasificacion[0].equipo,
          team2: clasificacion[3].equipo
        };
        const semifinal2 = {
          team1: clasificacion[1].equipo,
          team2: clasificacion[2].equipo
        };
        return `
          <h2 class="mb-4">Play Offs</h2>
          <div class="bracket">
            <div class="round">
              <div class="match">
                <h5>Semifinal 1</h5>
                <p>${semifinal1.team1} vs ${semifinal1.team2}</p>
                <p><small>Sets: Por definir</small></p>
              </div>
              <div class="match">
                <h5>Semifinal 2</h5>
                <p>${semifinal2.team1} vs ${semifinal2.team2}</p>
                <p><small>Sets: Por definir</small></p>
              </div>
            </div>
            <div class="round">
              <div class="match">
                <h5>Final</h5>
                <p>Por definir</p>
                <p><small>Sets: Por definir</small></p>
              </div>
            </div>
          </div>
        `;
      }
    };

    // --------------------------------------------------------------------
    // 7. Router: Cargar la vista según el hash
    // --------------------------------------------------------------------
    async function loadView() {
      const section = location.hash.substring(1) || 'home';
      const appDiv = document.getElementById('app');
      if (typeof views[section] === 'function') {
        appDiv.innerHTML = await views[section]();
      } else {
        appDiv.innerHTML = views[section] || '<p>Sección no encontrada</p>';
      }
      setupForms();
      // Si la vista es "registrar", se llenan los desplegables con equipos desde la BD
      if (section === 'registrar') {
        const equipos = await fetchEquipos();
        console.log("Equipos recibidos:", equipos);
        const selA = document.getElementById('equipoA');
        const selB = document.getElementById('equipoB');
        selA.innerHTML = '<option value="">-- Selecciona --</option>';
        selB.innerHTML = '<option value="">-- Selecciona --</option>';
        equipos.forEach(item => {
          const optionA = document.createElement('option');
          optionA.value = item.equipo;
          optionA.textContent = item.equipo;
          selA.appendChild(optionA);

          const optionB = document.createElement('option');
          optionB.value = item.equipo;
          optionB.textContent = item.equipo;
          selB.appendChild(optionB);
        });
      }
    }

    // --------------------------------------------------------------------
    // 8. Configurar eventos en los formularios
    // --------------------------------------------------------------------
    function setupForms() {
      // Login
      const loginForm = document.getElementById('loginForm');
      if (loginForm) {
        loginForm.addEventListener('submit', e => {
          e.preventDefault();
          const password = document.getElementById('password').value;
          if (password === 'lospibes') {
            setAdmin(true);
            location.hash = '#home';
          } else {
            alert('Contraseña incorrecta');
          }
        });
      }
      // Logout
      if (location.hash.substring(1) === 'logout') {
        setAdmin(false);
        updateNav();
        setTimeout(() => { location.hash = '#home'; }, 1500);
      }
      // Registrar Partido
      const registrarForm = document.getElementById('registrarForm');
      if (registrarForm) {
        registrarForm.addEventListener('submit', async e => {
          e.preventDefault();
          const partido = {
            equipo_a: document.getElementById('equipoA').value,
            equipo_b: document.getElementById('equipoB').value,
            set1_a: Number(document.getElementById('set1A').value),
            set1_b: Number(document.getElementById('set1B').value),
            set2_a: Number(document.getElementById('set2A').value),
            set2_b: Number(document.getElementById('set2B').value),
            set3_a: Number(document.getElementById('set3A').value),
            set3_b: Number(document.getElementById('set3B').value),
            jornada: Number(document.getElementById('jornada').value),
            lugar: document.getElementById('lugar').value,
            hora: document.getElementById('hora').value,
            fecha: new Date().toISOString()
          };
          const result = await createPartidoDB(partido);
          if (result && result.success) {
            alert('Partido registrado (ID: ' + result.insertedId + ')');
            location.hash = '#historial';
          } else {
            alert('Error al registrar partido');
          }
        });
      }
    }

    // Funciones para editar y eliminar partidos (solo para admin)
    async function editMatch(partidoId) {
      if (!isAdmin()) {
        alert('Debes iniciar sesión como administrador para editar un partido.');
        return;
      }
      const partidos = await fetchPartidosDB();
      const match = partidos.find(m => m.id === partidoId);
      if (!match) {
        alert('No se encontró el partido');
        return;
      }
      const formHTML = `
        <div class="card mx-auto" style="max-width: 600px;">
          <div class="card-header bg-secondary text-white">
            <h4 class="card-title mb-0">Modificar Partido (ID: ${match.id})</h4>
          </div>
          <div class="card-body">
            <form id="editForm">
              <div class="mb-3">
                <label class="form-label">Equipo A:</label>
                <input type="text" class="form-control" id="equipoA_edit" value="${match.equipo_a}" required>
              </div>
              <div class="mb-3">
                <label class="form-label">Equipo B:</label>
                <input type="text" class="form-control" id="equipoB_edit" value="${match.equipo_b}" required>
              </div>
              <h5>Set 1:</h5>
              <div class="row mb-3">
                <div class="col">
                  <label class="form-label">Equipo A:</label>
                  <input type="number" class="form-control" id="set1A_edit" value="${match.set1_a}" required>
                </div>
                <div class="col">
                  <label class="form-label">Equipo B:</label>
                  <input type="number" class="form-control" id="set1B_edit" value="${match.set1_b}" required>
                </div>
              </div>
              <h5>Set 2:</h5>
              <div class="row mb-3">
                <div class="col">
                  <label class="form-label">Equipo A:</label>
                  <input type="number" class="form-control" id="set2A_edit" value="${match.set2_a}" required>
                </div>
                <div class="col">
                  <label class="form-label">Equipo B:</label>
                  <input type="number" class="form-control" id="set2B_edit" value="${match.set2_b}" required>
                </div>
              </div>
              <h5>Set 3:</h5>
              <div class="row mb-3">
                <div class="col">
                  <label class="form-label">Equipo A:</label>
                  <input type="number" class="form-control" id="set3A_edit" value="${match.set3_a}" required>
                </div>
                <div class="col">
                  <label class="form-label">Equipo B:</label>
                  <input type="number" class="form-control" id="set3B_edit" value="${match.set3_b}" required>
                </div>
              </div>
              <div class="mb-3">
                <label class="form-label">Jornada:</label>
                <input type="number" class="form-control" id="jornada_edit" value="${match.jornada}" required>
              </div>
              <div class="mb-3">
                <label class="form-label">Lugar/Club:</label>
                <input type="text" class="form-control" id="lugar_edit" value="${match.lugar || ''}">
              </div>
              <div class="mb-3">
                <label class="form-label">Hora:</label>
                <input type="time" class="form-control" id="hora_edit" value="${match.hora || ''}">
              </div>
              <button type="submit" class="btn btn-primary w-100">Guardar Cambios</button>
            </form>
          </div>
        </div>
      `;
      document.getElementById('app').innerHTML = formHTML;
      const editForm = document.getElementById('editForm');
      editForm.addEventListener('submit', async e => {
        e.preventDefault();
        const updated = {
          equipo_a: document.getElementById('equipoA_edit').value,
          equipo_b: document.getElementById('equipoB_edit').value,
          set1_a: Number(document.getElementById('set1A_edit').value),
          set1_b: Number(document.getElementById('set1B_edit').value),
          set2_a: Number(document.getElementById('set2A_edit').value),
          set2_b: Number(document.getElementById('set2B_edit').value),
          set3_a: Number(document.getElementById('set3A_edit').value),
          set3_b: Number(document.getElementById('set3B_edit').value),
          jornada: Number(document.getElementById('jornada_edit').value),
          lugar: document.getElementById('lugar_edit').value,
          hora: document.getElementById('hora_edit').value,
          fecha: match.fecha  // Mantener la fecha original
        };
        const result = await updatePartidoDB(match.id, updated);
        if (result && result.success) {
          alert('Partido modificado');
          location.hash = '#historial';
        } else {
          alert('Error al modificar partido');
        }
      });
    }

    async function deleteMatch(partidoId) {
      if (!isAdmin()) {
        alert('Debes iniciar sesión como administrador para eliminar un partido.');
        return;
      }
      if (!confirm('¿Seguro que deseas eliminar este partido?')) return;
      const result = await deletePartidoDB(partidoId);
      if (result && result.success) {
        alert('Partido eliminado');
        location.hash = '#historial';
      } else {
        alert('Error al eliminar partido');
      }
    }

    // --------------------------------------------------------------------
    // 7. Router: Cargar la vista según el hash
    // --------------------------------------------------------------------
    async function loadView() {
      const section = location.hash.substring(1) || 'home';
      const appDiv = document.getElementById('app');
      if (typeof views[section] === 'function') {
        appDiv.innerHTML = await views[section]();
      } else {
        appDiv.innerHTML = views[section] || '<p>Sección no encontrada</p>';
      }
      setupForms();
      // Si la vista es "registrar", se llenan los desplegables con equipos desde la BD
      if (section === 'registrar') {
        const equipos = await fetchEquipos();
        console.log("Equipos recibidos:", equipos);
        const selA = document.getElementById('equipoA');
        const selB = document.getElementById('equipoB');
        selA.innerHTML = '<option value="">-- Selecciona --</option>';
        selB.innerHTML = '<option value="">-- Selecciona --</option>';
        equipos.forEach(item => {
          const optionA = document.createElement('option');
          optionA.value = item.equipo;
          optionA.textContent = item.equipo;
          selA.appendChild(optionA);

          const optionB = document.createElement('option');
          optionB.value = item.equipo;
          optionB.textContent = item.equipo;
          selB.appendChild(optionB);
        });
      }
    }

    // --------------------------------------------------------------------
    // 8. Configurar eventos en los formularios
    // --------------------------------------------------------------------
    function setupForms() {
      // Login
      const loginForm = document.getElementById('loginForm');
      if (loginForm) {
        loginForm.addEventListener('submit', e => {
          e.preventDefault();
          const password = document.getElementById('password').value;
          if (password === 'lospibes') {
            setAdmin(true);
            location.hash = '#home';
          } else {
            alert('Contraseña incorrecta');
          }
        });
      }
      // Logout
      if (location.hash.substring(1) === 'logout') {
        setAdmin(false);
        updateNav();
        setTimeout(() => { location.hash = '#home'; }, 1500);
      }
      // Registrar Partido
      const registrarForm = document.getElementById('registrarForm');
      if (registrarForm) {
        registrarForm.addEventListener('submit', async e => {
          e.preventDefault();
          const partido = {
            equipo_a: document.getElementById('equipoA').value,
            equipo_b: document.getElementById('equipoB').value,
            set1_a: Number(document.getElementById('set1A').value),
            set1_b: Number(document.getElementById('set1B').value),
            set2_a: Number(document.getElementById('set2A').value),
            set2_b: Number(document.getElementById('set2B').value),
            set3_a: Number(document.getElementById('set3A').value),
            set3_b: Number(document.getElementById('set3B').value),
            jornada: Number(document.getElementById('jornada').value),
            lugar: document.getElementById('lugar').value,
            hora: document.getElementById('hora').value,
            fecha: new Date().toISOString()
          };
          const result = await createPartidoDB(partido);
          if (result && result.success) {
            alert('Partido registrado (ID: ' + result.insertedId + ')');
            location.hash = '#historial';
          } else {
            alert('Error al registrar partido');
          }
        });
      }
    }

    window.addEventListener('hashchange', loadView);
    window.addEventListener('load', () => {
      updateNav();
      loadView();
    });
  </script>
</body>
</html>
